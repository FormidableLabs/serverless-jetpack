service: serverless-jetpack-individually

package:
  individually: ${file(./serverless.js):pkg.individually}
  excludeDevDependencies: ${file(./serverless.js):pkg.excludeDevDependencies}

custom:
  region: ${opt:region, env:AWS_REGION}
  stage: ${opt:stage, env:STAGE}
  jetpack: ${file(./serverless.js):jetpack.service}

plugins:
  modules:
    - serverless-offline
    - ../../../plugins/wrapper

provider:
  name: aws
  runtime: nodejs8.10
  region: ${self:custom.region}
  stage: ${self:custom.stage}
  environment:
    STAGE: ${self:custom.stage}
  timeout: 30 # seconds (`300` max)
  memorySize: 128 # MB value (`1024` default)

functions:
  base:
    handler: src/base.handler
    events: # Use a generic proxy to allow Express app to route.
      - http: ANY /base
      - http: 'ANY /base/{proxy+}'

  another:
    handler: src/another.handler
    events:
      - http: ANY /another
      - http: 'ANY /another/{proxy+}'
    package:
      # Package zip should **not** have `src/base.js`.
      exclude:
        - "**/node_modules/aws-sdk/**" # included on Lambda.
        - "node_modules/**/HISTORY.md"
        - "node_modules/**/README.md"
        - "node_modules/**/LICENSE"
        - "src/**"
      include:
        # Bring back excluded stuff.
        - "src/another.js"
        - "node_modules/accepts/HISTORY.md"
        - "node_modules/accepts/README.md"
        - "node_modules/accepts/LICENSE"
        # Other excludes
        - "!**/node_modules/.yarn-integrity"
        - "!**/node_modules/.cache/**"
        # Re-exclude
        - "!**/node_modules/**/LICENSE"
        - "package.json"

  # Python-only handler.
  python:
    handler: handler.hello
    runtime: python3.7
    package:
      include:
        - "!**/node_modules/**"
        - "!**/*.js"
        - "!**/*.lock"
        - "*.py"
