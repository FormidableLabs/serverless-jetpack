service: serverless-jetpack-complex

package:
  individually: ${file(./serverless.js):pkg.individually}
  excludeDevDependencies: ${file(./serverless.js):pkg.excludeDevDependencies}
  include:
    # General
    - "!**/.DS_Store"
    - "!**/yarn.lock"
    - "!**/package-lock.json"
    # Dependencies
    # uuid is a potentially flattened dep of `aws-sdk` that we don't need
    # to provide because `aws-sdk` will have it internally in Lambda
    - "!**/node_modules/.bin/uuid"
    - "!**/node_modules/uuid/**"
    - "!**/node_modules/aws-sdk/**"
    - "!**/node_modules/{@*/*,*}/CHANGELOG.md"
    - "!**/node_modules/{@*/*,*}/HISTORY.md"
    - "!**/node_modules/{@*/*,*}/LICENSE"
    - "!**/node_modules/{@*/*,*}/README.md"

custom:
  region: ${opt:region, env:AWS_REGION}
  stage: ${opt:stage, env:STAGE}
  jetpack: ${file(./serverless.js):jetpack.service}

plugins:
  modules:
    - serverless-offline
    - ../../../plugins/wrapper

provider:
  name: aws
  runtime: nodejs8.10
  region: ${self:custom.region}
  stage: ${self:custom.stage}
  environment:
    STAGE: ${self:custom.stage}
  timeout: 30 # seconds (`300` max)
  memorySize: 128 # MB value (`1024` default)

layers:
  no-deps:
    path: layers/no-deps
  # serverless built-in _won't_ exclude devDeps nested in `nodejs`
  with-deps:
    path: layers/with-deps
  # ... but Jetpack will with a `roots` configuration! (Special test excludes..)
  with-deps-no-dev:
    path: layers/with-deps
    jetpack:
      roots:
        - layers/with-deps/nodejs
  # serverless built-in _will_ exclude devDeps at root
  with-deps-root:
    path: layers/with-deps/nodejs

functions:
  base:
    handler: src/base.handler
    events: # Use a generic proxy to allow Express app to route.
      - http: ANY /base
      - http: 'ANY /base/{proxy+}'
    environment:
      BASE_URL: /base
  individually:
    handler: src/base.handler
    events:
      - http: ANY /individually
      - http: 'ANY /individually/{proxy+}'
    environment:
      BASE_URL: /individually
    package:
      individually: true
  individually-reuse:
    handler: src/base.handler
    events:
      - http: ANY /individually-reuse
      - http: 'ANY /individually-reuse/{proxy+}'
    environment:
      BASE_URL: /individually-reuse
    package:
      artifact: ".serverless/individually.zip" # Reuse package from individually
  disabled:
    handler: src/base.handler
    events:
      - http: ANY /disabled
      - http: 'ANY /disabled/{proxy+}'
    environment:
      BASE_URL: /disabled
    package:
      disable: true
  use-layers:
    handler: src/base.handler
    events:
      - http: ANY /use-layers
      - http: 'ANY /use-layers/{proxy+}'
    environment:
      BASE_URL: /use-layers
    layers:
      - { Ref: NoDepsLambdaLayer }
      - { Ref: WithDepsLambdaLayer }
